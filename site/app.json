[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nsource(\"calculator.R\")\n\nui <- page_fillable(\n  title = \"Powered for Paediatric Safety\",\n  layout_columns(\n    card(\n      card_header(\"Inputs\"),\n      layout_columns(\n        card(\n          card_header(\"Reference Population\"),\n          numericInput(\"ref_cx\", \"Control rate\", value = 0.01, min = 0, max = 1, step = 0.01),\n          numericInput(\"ref_tx\", \"Treated rate\", value = 0.03, min = 0, max = 1, step = 0.01)\n          ),\n        card(\n          card_header(\"Prior Information\"),\n          numericInput(\"prior_cx_a\", \"Control alpha\", value = 1, min = 0, step = 0.5),\n          numericInput(\"prior_cx_b\", \"Control beta\", value = 1, min = 0, step = 0.5),\n          numericInput(\"prior_tx_a\", \"Treated alpha\", value = 1, min = 0, step = 0.5),\n          numericInput(\"prior_tx_b\", \"Treated beta\", value = 1, min = 0, step = 0.5)\n        ),\n        card(\n          card_header(\"Safety Database\"),\n          numericInput(\"ped_cx_n\", \"Control N\", value = 0, min = 0),\n          numericInput(\"ped_cx_event\", \"Control Events\", value = 0, min = 0),\n          numericInput(\"ped_tx_n\", \"Treated N\", value = 0, min = 0),\n          numericInput(\"ped_tx_event\", \"Treated Events\", value = 0, min = 0)\n        ),\n        card(\n          card_header(\"New Study\"),\n          numericInput(\"ped_n_cx\", \"N control arm\", value = 20, min = 0),\n          numericInput(\"ped_n_tx\", \"N treated arm\", value = 20, min = 0),\n          numericInput(\"fold_increase\", \"Fold increase over reference difference\", value = 2, min = 1)\n        )\n      )\n    ),\n    card(\n      card_header(\"Results\"),\n      layout_columns(\n        plotOutput(\"curve\"),\n        tableOutput(\"table\"),\n        col_widths = c(6, 6)\n      )\n    ),\n    col_widths = c(12, 12)\n  )\n)\n\nserver <- function(input, output) {\n\n  # Constrain inputs dynamically\n  observeEvent(input$ped_cx_n, {\n    updateSliderInput(inputId = \"ped_cx_event\", max = input$ped_cx_n)\n  })\n  observeEvent(input$ped_tx_n, {\n    updateSliderInput(inputId = \"ped_tx_event\", max = input$ped_tx_n)\n  })\n\n  prob_table <- reactive({\n    prob_rule_out2(\n      ref_tx = input$ref_tx,\n      ref_cx = input$ref_cx,\n      fold_increase = input$fold_increase,\n      ped_n_cx = input$ped_n_cx,\n      ped_n_tx = input$ped_n_tx,\n      prior_tx_a = input$prior_tx_a,\n      prior_tx_b = input$prior_tx_b,\n      prior_cx_a = input$prior_cx_a,\n      prior_cx_b = input$prior_cx_b,\n      ped_cx_event = input$ped_cx_event,\n      ped_cx_n = input$ped_cx_n,\n      ped_tx_event = input$ped_tx_event,\n      ped_tx_n = input$ped_tx_n\n    )\n  })\n\n  output$table <- renderTable({\n    prob_table()\n  }, digits = 4)\n\n  output$curve <- renderPlot({\n    df <- prob_table()\n    plot(\n      x = df[, 2],\n      y = df[, 3],\n      type = \"b\",\n      ylim = c(0, 1),\n      xlab = \"Fold Increase\",\n      ylab = \"Probability\"\n    )\n  })\n\n}\n\n\nshinyApp(ui = ui, server = server)\n\n\n#\n# ref_tx = 0.06,\n# ref_cx = 0.03,\n# fold_increase = 3,\n# rand_ratio = 1/1,\n# ped_n = 200,\n#  = 1,\n#  = 1,\n#  = 1,\n# prior_cx_b = 1,\n#  = 0,\n#  = 0,\n#  = 0,\n#  = 0\n","type":"text"},{"name":"calculator.R","content":"\nprob_rule_out2 <- function(\n    ref_tx = 0.06,\n    ref_cx = 0.03,\n    fold_increase = 3,\n    ped_n_cx = 100,\n    ped_n_tx = 100,\n    prior_tx_a = 1,\n    prior_tx_b = 1,\n    prior_cx_a = 1,\n    prior_cx_b = 1,\n    ped_cx_event = 0,\n    ped_cx_n = 0,\n    ped_tx_event = 0,\n    ped_tx_n = 0) {\n  num_ouputs <- 6\n  m <- fold_increase # for length of interval of treatment responses\n  trt_nseq <- ped_n_tx\n  pbo_nseq <- ped_n_cx\n  pbo_pcseq_low <- ref_cx # kept at 0.03 for common ADR; usually 0.02 to 0.05\n  trt_pcseq_low <- ref_tx\n  trt_pcseq <- seq(trt_pcseq_low, pbo_pcseq_low + m * (trt_pcseq_low - pbo_pcseq_low), length = num_ouputs)\n  pbo_pcseq <- rep(pbo_pcseq_low, length(trt_pcseq))\n  delta_p <- trt_pcseq - pbo_pcseq\n  delta_p_low <- trt_pcseq_low - pbo_pcseq_low\n  delta_pmult <- delta_p / delta_p_low\n  # browser()\n\n\n  alpha1 <- prior_tx_a + ped_tx_event\n  beta1 <- prior_tx_b + (ped_tx_n - ped_tx_event)\n  alpha2 <- prior_cx_a + ped_cx_event\n  beta2 <- prior_cx_b + (ped_cx_n - ped_cx_event)\n\n\n\n  MatrixA <- matrix(nrow = num_ouputs, ncol = 3)\n\n  for (j in seq_len(num_ouputs)) {\n    a1 <- trt_nseq * trt_pcseq[j] + alpha1\n    b1 <- trt_nseq - trt_nseq * trt_pcseq[j] + beta1\n    a2 <- pbo_nseq * pbo_pcseq[j] + alpha2\n    b2 <- pbo_nseq - pbo_nseq * pbo_pcseq[j] + beta2\n    x <- seq(delta_p[j], 1, 0.001) # interval for integration\n    y <- sapply(x, diff_beta_plus, a1 = a1, a2 = a2, b1 = b1, b2 = b2)\n    xy <- cbind(x, y)\n    xy.narm <- xy[complete.cases(xy), ]\n    Pr.less.x <- 1 - pracma::trapz(xy.narm[, 1], xy.narm[, 2])\n    MatrixA[j, ] <- c(delta_p[j], delta_pmult[j], Pr.less.x)\n  }\n\n\n  Safety.mat <- data.frame(MatrixA)\n  colnames(Safety.mat) <- c(\"Incidence Difference\", \"Incidence Difference Factor\", \"Probability\")\n  return(Safety.mat)\n}\n\ndiff_beta_plus <- function(a1, a2, b1, b2, x) {\n  A <- beta(a1, b1) * beta(a2, b2)\n  p1.density <- try(beta(a2, b1) * x^(b1 + b2 - 1) * (1 - x)^(a2 + b1 - 1) * F1(b1, a1 + a2 + b1 + b2 - 2, 1 - a1, b1 + a2, 1 - x, 1 - x^2) / A)\n  if (class(p1.density) != \"try-error\") {\n    p1.density\n  } else {\n    p1.density <- \"NA\"\n  }\n}\n\ndiff_beta_plus_log <- function(a1, a2, b1, b2, x) {\n  logA <- lbeta(a1, b1) + lbeta(a2, b2)\n  lbeta(a2, b1) +\n    (b1 + b2 - 1) * log(x) +\n    (a2 + b1 - 1) * log(1 - x) +\n    log(F1(b1, a1 + a2 + b1 + b2 - 2, 1 - a1, b1 + a2, 1 - x, 1 - x^2)) -\n    logA\n}\n\nF1 <- function(a, b, b.prime, c, x, y, ...) {\n  A1.f1 <- try({\n    integrate(\n      f = A1.simple,\n      lower = 0,\n      upper = 1,\n      a = a,\n      b = b,\n      b.prime = b.prime,\n      c = c,\n      x = x,\n      y = y,\n      subdivisions = 5000,\n      rel.tol = .Machine$double.eps^0.5,\n      stop.on.error = FALSE, ...)$value\n  },\n  silent = TRUE\n  )\n  if (class(A1.f1) != \"try-error\") {\n    A1.f2 <- gamma(c) / (gamma(a) * gamma(c - a)) * A1.f1\n  } else {\n    A1.f2 <- NA\n  }\n}\n\n\nA1.simple <- function(u, a, b, b.prime, c, x, y) {\n  u^(a - 1) * (1 - u)^(c - a - 1) * (1 - u * x)^(-b) * (1 - u * y)^(-b.prime)\n}\n","type":"text"}]
